import { createAsyncThunk, createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchCount } from './counterAPI';

export interface CounterState {
  valueObj: { value: number};
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  valueObj: { value: 0 },
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const testSlice = createSlice({
  name: 'test',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.valueObj.value += 1;
    },
    decrement: (state) => {
      state.valueObj.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.valueObj.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.valueObj.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { increment, decrement, incrementByAmount } = testSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectValueObj = (state: RootState) => {
  console.log('selectValueObj 发生计算');
  return state.test.valueObj;
}

export const selectObjGenByValueObj = (state: RootState) => {
  console.log('selectObjGenByValueObj 发生计算');
  return { ...state.test.valueObj, otherProp: 'test' }
};

export const selectObjByCreateSelector = createSelector(selectValueObj, (valueObj) => {
  console.log('selectObjByCreateSelector 发生计算');
  return { ...valueObj, otherProp: 'test' }
})

export const selectObjByBadCreateSelector = createSelector((state: RootState) => ({ ...state.test.valueObj, test: 'test' }), (valueObj) => {
  console.log('selectObjByBadCreateSelector 发生计算');
  return { ...valueObj, otherProp: 'test' }
})



export default testSlice.reducer;
